// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "src/Contract.sol";
import "src/Exploit.sol";

contract ExploitTest is Test {

    Exploit public attacker;
    SwappableTokenTwo token1;
    SwappableTokenTwo token2;
    DexTwo public dex;
    address public eoaAddress;

    function setUp() public {
        eoaAddress = 0x15cB768EBC5A5E7524fdDc3A2d5db7512767bD53;
        dex = new DexTwo();
        token1 = new SwappableTokenTwo(address(dex), "tok1", "T1", 110);
        token2 = new SwappableTokenTwo(address(dex), "tok2", "T2", 110);
        dex.setTokens(address(token1), address(token2));
        token1.transfer(eoaAddress, 10);
        token2.transfer(eoaAddress, 10);
        token1.transfer(address(dex), 100);
        token2.transfer(address(dex), 100);
        attacker = new Exploit(address(dex));
        vm.startPrank(eoaAddress);
        token1.transfer(address(attacker), 10);
        token2.transfer(address(attacker), 10);
        vm.stopPrank();
    }

    function testExploit() public {
        attacker.fire();
        assertEq(token2.balanceOf(address(dex)), 0);
    }
}